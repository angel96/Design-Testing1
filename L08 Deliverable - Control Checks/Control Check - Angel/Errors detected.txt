0. Script de SQL con Aolet incluido en produccion

1. Dashboard
	- Colocar Double[] en el metodo del CustomisationService
	- Clase utiles hacer que devuelva Double[]
	- Service. Sublist. Montar la condición en el if.

		if (!customers.isEmpty() && customers.size() > 3)
			customers = new ArrayList<Customer>(this.repositoryCustomisationSystem.topTreeCustomerOrderByComplaints()).subList(0, 3);
		if (!handyWorkers.isEmpty() && handyWorkers.size() > 3)
			handyWorkers = new ArrayList<HandyWorker>(this.repositoryCustomisationSystem.topTreeHandyWorkerOrderByComplaints()).subList(0, 3);


(VIEW) 2. Form Errors del Edit.jsp de aolet
(VIEW) 3. Color list aolets > row[i].style.backgroundColor = ""
LISTO (VIEW) 4. ReadOnly en Edit.jsp > aolet.finalMode

5. Save Controller
	- Al modificar el estado en el edit.do, el aolet no coge la fixuptask idonea. Solucionado con if (Si el aolet es distinto de 0).
	if (aolet.getId() != 0)
					fixuptask = this.service.fixUpByAolet(aolet.getId()).getId();

6. EditOne (Añadir a RequestURI el Id)
7. Create Controller
	@Autowired
	FixUpTaskService > Comprobar si la FixUpTask es mia.

8. List & Show view para que lo vea un HandyWorker
	- Modificar security.xml para handyworker
	<security:intercept-url access="hasRole('HANDY_WORKER')"
			pattern="/aolet/handyworker/list.do" />	
			<security:intercept-url access="hasRole('HANDY_WORKER')"
			pattern="/aolet/handyworker/edit.do" />	
	- Modificado metodo findOne del controller
9. Borrar el security access de customer sobrante en list aolets
10. Modificada la lista de fixuptasks para visualizar la lista de aolets para cualquier role
<security:authorize access="hasRole('HANDY_WORKER')">
	
	<display:column titleKey="fixuptask.aolets">
			<a href="aolet/handyworker/list.do?fixuptask=${row.id}"><spring:message
					code="fixuptask.aolets" /></a>
		</display:column>
	
	</security:authorize>

	<security:authorize access="hasRole('CUSTOMER')">
		<display:column titleKey="fixuptask.aolets">
			<a href="aolet/customer/list.do?fixuptask=${row.id}"><spring:message
					code="fixuptask.aolets" /></a>
		</display:column>
		<display:column titleKey="fixuptask.aolets.create">
			<a href="aolet/customer/create.do?fixuptask=${row.id}"><spring:message
					code="fixuptask.aolets.create" /></a>
		</display:column>
	</security:authorize>

// Controller

@RequestMapping(value = {
	"aolet/customer", "aolet/handyworker"
})

===========================================================================
	@RequestMapping(value = "/edit", method = RequestMethod.GET)
	public ModelAndView edit(@RequestParam final int id) {

		ModelAndView result;
		final Aolet aolet = this.service.findOne(id);
		result = this.createEditModelAndView(0, aolet);
		boolean mine;
		if (Utiles.findAuthority(LoginService.getPrincipal().getAuthorities(), Authority.CUSTOMER)) {
			mine = this.service.getAoletsUserLogged().contains(aolet);
			result.addObject("requestURI", "aolet/customer/edit.do?id=" + id);
		} else {
			mine = false;
			result.addObject("requestURI", "aolet/handyworker/edit.do?id=" + id);
		}
		result.addObject("mine", mine);

		return result;
	}
===========================================================================
@Query("select a from FixUpTask f join f.aolets a where f.id = ?1 and a.finalMode = true")
	Collection<Aolet> getAoletsByFixUpTaskFinalMode(int fixuptask);

public Collection<Aolet> getAoletsByFixUpTask(final int fixuptask) {
		Collection<Aolet> aolets;
		if (Utiles.findAuthority(LoginService.getPrincipal().getAuthorities(), Authority.CUSTOMER))
			aolets = this.repositoryAolet.getAoletsByFixUpTask(fixuptask);
		else
			aolets = this.repositoryAolet.getAoletsByFixUpTaskFinalMode(fixuptask);

		return aolets;
	}