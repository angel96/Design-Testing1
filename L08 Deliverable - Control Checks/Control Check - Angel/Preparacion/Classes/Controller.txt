package controllers;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

@Controller
@RequestMapping("/entity/actor")
//@RequestMapping(value = {"/entity/actor1", "/entity/actor2"})
//Warranty -> @Valid Warranty warranty
//HandyWorker -> @Valid HandyWorker handyWorker
public class EntityController extends AbstractController {

	//Services
	@Autowired
	
	//CRUD
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public ModelAndView list(){
		ModelAndView result;
		result = new Model("entity/list");
		result.add("", Object);
		return result;
	}

	//Create
	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public ModelAndView create(){
		ModelAndView result;
		result = this.createEditModelAndView(service.create());
		return result;
	}
	
	//findOne
	@RequestMapping(value = "/edit", method = RequestMethod.GET)
	public ModelAndView edit(@RequestParam final int id){

		ModelAndView result;
		result = this.createEditModelAndView(service.findOne(id));
		return result;
	}

	//Save & Update
	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "save")
	public ModelAndView edit(@Valid final Entity entity, BindingResult result){

		ModelAndView result;


		if(binding.hasErrors()){
			System.out.println("Entro aqui");
			result = this.createEditModelAndView(entity, null);
			result.add("errors", binding.getAllErrors());
		} else {

			try {

			//Here goes service code

			//Redirection to list			
			result = new ModelAndView("redirect:list.do");

			} catch (Exception oops) {
				//Save in message file the reference to entity.commit.error
				result = this.createEditModelAndView(entity, "entity.commit.error");
				result.addObject("oops", oops.getMessage());
				result.addObject("errors", binding.getAllErrors());
			}


		}

		return result;


	}	

	//Delete
	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "delete")
	public ModelAndView edit(final Entity entity){

		ModelAndView result;

		try {
			//Delete code

			result = new ModelAndView("redirect:list.do");
		} catch (final Throwable oops) {
			result = this.createEditModelAndView(tutorial, "tutorial.commit.error");
		}
		return result;
	}

	//Protected Methods
	protected ModelAndView createEditModelAndView(final Entity entity){

		ModelAndView result;

		result = this.createEditModelAndView(entity, null);

		return result;
	}

	protected ModelAndView createEditModelAndView(final Entity entity, String message){

		ModelAndView result;

		result = new ModelAndView("entity/edit");
		result.add("entity", entity);
		result.add("message", message);

		return result;
	}
}