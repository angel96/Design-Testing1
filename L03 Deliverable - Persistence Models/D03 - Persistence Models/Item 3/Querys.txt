# Queries

# Query C/1
select avg (c.fixUpTask.size), min(c.fixUpTask.size), max(c.fixUpTask.size), stddev(c.fixUpTask.size) from Customer c;

# Query C/2
select stddev(f.application.size), min(f.application.size), max(f.application.size), avg(f.application.size) from FixUpTask f;

# Query C/3
select avg(f.maximumPrice), min(f.maximumPrice), max(f.maximumPrice), stddev(f.maximumPrice) from FixUpTask f;

# Query C/4
select stddev(f.offeredPrice),min(f.offeredPrice), max(f.offeredPrice), avg(f.offeredPrice) from Application f;

# Query C/5
select (select count(a) from Application a where a.status = 'pending')*1.0/count(ap) from Application ap;

# Query C/6
select count(f.status)*1.0/(select count(t)*1.0 from Application t) from Application f where f.status = 'accepted';

# Query C/7
select count(f.status)*1.0/(select count(t)*1.0 from Application t) from Application f where f.status = 'rejected';

# Query C/8
select (count(a)*1.0/(select count(ap) from Application ap)) from Application a where current_date() > a.momentElapsed and a.status = 'pending';

# Query C/9
select f from Customer f join f.fixUpTask t where f.fixUpTask.size > (select avg(f.fixUpTask.size)+(avg(f.fixUpTask.size)/10)*1.0 from Customer f) order by t.application.size;

# Query C/10
select f from HandyWorker f join f.application a where a.status='accepted' and f.application.size > (select avg(f.application.size)+(avg(f.application.size)/10)*1.0 from HandyWorker f) order by f.application.size;

# Query B/1
select min(f.complaint.size), max(f.complaint.size), avg(f.complaint.size), stddev(f.complaint.size) from FixUpTask f;

# Query B/2
select stddev(r.notes.size), min(r.notes.size), max(r.notes.size), avg(r.notes.size) from Report r;

# Query B/3
select count(a)*1.0/(select count(t)*1.0 from FixUpTask t) from FixUpTask a where a.complaint.size > 0;

# Query B/4
select c from Customer c order by c.complaint.size DESC;

# Query B/5
select distinct h from HandyWorker h join h.application t join t.fixUpTask f join f.complaint c group by h.id order by sum(f.complaint.size) DESC;